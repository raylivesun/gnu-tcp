;; Name Project: "GNU Emacs Relatory Routines"
;; Name Program: "GNU Emacs Shark Routines"
;; Name Extension "Lisp"
;; Name Data 512
;; Name Unit 512

(provide 'ipc)
(require 'ipc)

(load("/home/admin/app/locust/gnu-tcp/matrix/gnu/bin/path-current/path-debug/rpl10tkp.lisp"))

(defun frame (onwire &optional captured
		     :id ipc)
  (declare ((onwire &optional captured
		    :id ipc)
	    (let* ((interface-id --static
				 :id port)
		   (t ((function name)
		      (:name string)))
		   (t ((function pcap)
		       (:pcap type)))
		   (t ((function arrival-times)
		       (:times
			"Arrival Time: Dec 27, 2024
                         20:20:43.969626504 -03")))
		   (t ((function times-shift)
		       (:packet
			"[Time shift for this packet: 0.000000000 seconds]")))
		   (t ((function epoch-times)
		       (:times
			"Epoch Time: 1735341643.969626504 seconds")))
		   (t ((function times-delta)
		       (:delta
			"[Time delta from previous captured
                         frame: 0.000000000 seconds]")))
		   (t ((function times-delta)
		       (:delta
			"[Time delta from previous displayed
                         frame: 0.000000000 seconds]")))
		   (t ((function times-since)
		       (:since
			"[Time since reference or first
                         frame: 0.000000000 seconds]")))
		   (t ((function frame-number)
		       (:number #x1)))
		   (t ((function frame-length)
		       (:length
			"Frame Length: 360 bytes (2880 bits)")))
		   (t ((function capture-length)
		       (:length
			"Capture Length: 360 bytes (2880 bits)")))
		   (t ((function frame-marked)
		       (:maked False)))
		   (t ((function frame-ignored)
		       (:ignored
			"[Protocols in frame: eth:ethertype:ip:tcp:http]")))
		   (t ((function coloring-frame)
		       (:frame
			"[Coloring Rule Name:
                         ___conversation_color_filter___04]")))
		   (t ((function rule-string)
		       (:string
			"[Coloring Rule String:
                         frame.offset_shift == 0.000000000]"))))
	      (lambda ((ethernet-ii
			"Ethernet II, Src: 00:00:00_00:00:00 (00:00:00:00:00:00), Dst: 00:00:00_00:00:00 (00:00:00:00:00:00)"
			(dst
			 "Destination: 00:00:00_00:00:00 (00:00:00:00:00:00)")
			(address
			 "Address: 00:00:00_00:00:00 (00:00:00:00:00:00)"))
		       (if (cond ((objectp)
				   0 = ".... ..0. .... .... .... ....
                                       = LG bit: Globally unique address
                                       (factory default)"
				   0 = ".... ...0 .... .... .... ....
                                       = IG bit: Individual address (unicast)"))
			   (then
			    (type (stringp
				   "Type: IPv4 (0x0800)")))
			 (else
			  (type (strinp
				 "Type: IPv4 (0x0800)"))))
		       )))
	    ))
  "Internet Protocol Version 4, Src: localhost (127.0.0.1),
   Dst: localhost (127.0.0.1)"
  'onwire captured
  :id ipc)
				 
			  
			
			
		   
			
