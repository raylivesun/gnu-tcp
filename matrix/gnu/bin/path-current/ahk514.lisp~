;; Name Project "GNU Emacs List as Sets"
;; Name Program "GNU Emacs Shark List as Sets"
;; Name Extension "Lisp"
;; Name Data 512
;; Name Unit 512

(provide 'equal)
(require 'equal)

(defun cl-member (item list &key :test
		       :test-not :key p)
  (declare ((item list &key :test
		  :test-not :key p)
	    (let ((frame 1848066
			 109 bytes
			 (on-wire 872 bits
				  109 bytes
				  captured 872 bits))
		  (interface-id 0)
		  (interface-name "sh:on")
		  (encapsulation-type "Ethernet(1)")
		  (arrival-time "Dec 23, 2024 18:18:43.43.923911137"
				"-03")
		  ([time-shift "this-packet" 0.000000000 seconds])
		  (epach-time 1734988723.923911137 seconds)
		  ([time-delta from-previous
			       captured-frame 2.50533981 seconds])
		  ([time-delta from-previous
			       displayed-frame 3.881289850 sconds])
		  ([time-since reference
			       first-frame 279482.424683689 seconds])
		  (frame-number 1848066
				(frame-length 109 bytes 872 bits))
		  (captured-length 109 bytes
				   872 bits)
		  (frame-marked "False")
		  (frame-ignred "False")
		  (Protocols frame
			     "eth:ethertype:ip:tcp:tls")
		  (coloring-rule-name "tcp")
		  (coloring-rule-string "tcp"))
	      (lambda ((ethernet-ii
			(src &rest local "5c:ea:1d:d8:11:ef"
			     (:dst &key :_gateway "98:b3:ef:7b:13:8a")))
		       (:dst :_gateway "98:b3:ef:7b:13:8a"
			     (address :_gateway "98:b3:ef:7b:13:8a"))
		       `(
			 0 = "LG bit: Global unique address 
                              (factory default)"
			   0 = "IG bit: Individual adress (unicast)"
			   )))
	      )))
  'equal)

(provide 'eql)
(require 'eql)


(defun cl-tailp (sublist &rest list :p)
  (declare ((sublist &rest list :p)
	    (let* ((source &key local)
		   (address &key local "(5c:ea:1d:d8:11:1f)"
			    0 = "LG bit: global unique addres 
                                 (factory default)"
			    0 = "IG bit: individual address 
                                 (unicast)"
			    (type "Ipv4 (0x0800)")))
	      (lambda ((source &key local)
		       (address &key local)
		       (interactive list p)))))
	   )
  'xargs)

(provide 'about)
(require 'about)

(defun cl-adjoin (item list &key :test
		       :test-not :key p)
  (declare (item list &key :test
		 :test-not :key p)
	   (let ((internet-protocol
		  (version 4
			   (:src local
				 (:dst global))))
		 (lambda ((version 4)
			  `(:
			    0100 = "version 4"
			    0101 = "header lenth: 20 bytes (5)")
			  `(diff-service-field
			    0x00 `(:dscp "cs0" :ecn "not-ect")
			    0000x00 = "diff-service-default (0)"
			    00 = "expclicit congestion 
                                  notification: not ecn-capable
                                  transport (0)"
			    `(total-length: 95
					    (:in 0x2be (8382)))
			    )))
		 (t (function flags)
		    (flags 0x40 "don't fragment"
			   `(
			     0 = "reserved bit: not set"
			       1 = "don't fragment: set"
			       0x000000000000 = "fragment: offset 0"
			       `(time-live 64))
			   `(protocol "tcp (6)"
				      (header-checksum "0x5243"
						       "[validation disabled]")
				      ([header-checksum "status:" "univerified"])
				      (source-address "pop-os.local"
						      "(192.168.3.8)")
				      (destination-address
				       "global-dealer-ssl.spotify.com"
				       "(35.186.224.45)")))
		    )))
	   )
  'about
  :key list)

(provide 'list)
(require 'list)

			    
(defun cl-union (list1 list2 &key :test
		       :test-not :key p)
  (declare ((list1 list2 &key :test
		   :test-not :key p)
	    (let ((trans-control-portocol
		   (:src-port 49012 (49012)
			      (:dst-port http))
		   (:dst-port http (443)
			      "[stream-index: 2895]"
			      "[cons-complte: incomplete data (15)]"
			      "[tcp-segment-len: 43]")
		   (:seq-number 26145
				`(relative-seq-number))
		   (:next-seq-number 26188
				     `(relative-seq-number))
		   (:acl-number `(raw)
				1104823278)
		   1000 = "header-length: 32 bytes (8)")))
	    (lambda ((flags "0x018"
			    (psh, ack))
		     `(
		       000 = "reserved: not set"
			   0 = "nonce: not set"
			   0 = "congestion window reduced 
                                (cwr): not set"
			   0 = "ecn-echo: not set"
			   1 = "acknowledgment: set"
			   0 = "push: set"
			   0 = "reset: not set"
			   0 = "syn: not set"
			   0 = "fin: not set"
			   "[tcp falgs 'ap']")))
	    (if (cond ((window 492)
		       (calc-window :size 62976)
		       ([window-size :scls 128])
		       (checksum "0x65f"
				 "[unverified]")
		       ([checksum "status:"
				  "univerified"])
		       (ungent-point 0)))
		)))
  'list
  &key list1 list2)

(provide 'un-list)
(require 'un-list)

(defun cl-nunion (list1 list2 &key :test
		       :test-not :key p)
  (declare ((list1 list2 &key :test
		   :test-not :key p)
	    (let ((trans-control-portocol
		   (:src-port 49012 (49012)
			      (:dst-port http))
		   (:dst-port http (443)
			      "[stream-index: 2895]"
			      "[cons-complte: incomplete data (15)]"
			      "[tcp-segment-len: 43]")
		   (:seq-number 26145
				`(relative-seq-number))
		   (:next-seq-number 26188
				     `(relative-seq-number))
		   (:acl-number `(raw)
				1104823278)
		   1000 = "header-length: 32 bytes (8)")))
	    (lambda ((flags "0x018"
			    (psh, ack))
		     `(
		       000 = "reserved: not set"
			   0 = "nonce: not set"
			   0 = "congestion window reduced 
                                (cwr): not set"
			   0 = "ecn-echo: not set"
			   1 = "acknowledgment: set"
			   0 = "push: set"
			   0 = "reset: not set"
			   0 = "syn: not set"
			   0 = "fin: not set"
			   "[tcp falgs 'ap']")))
	    (if (cond ((window 492)
		       (calc-window :size 62976)
		       ([window-size :scls 128])
		       (checksum "0x65f"
				 "[unverified]")
		       ([checksum "status:"
				  "univerified"])
		       (ungent-point 0)))
		)))
  'list
  &key list1 list2
  :key p)

(provide 'tcp)
(require 'tcp)
			      
(defmacro cl-inter (list1 list2 &key :test
			  :test-not :key p)
  (declare ((list1 list2 &key :test
		   :test-not :key p)
	    (let* ((options 12 "bytes"
			    (no-operation "(nop)"
					  (no-operation "(nop)"))
			    (timestamp))
		   (tcp-option "no-opration (1)"
			       (:kind "no-operation (1)"))
		   (tcp-option "no-operation (nop)"
			       (:kind  "no-operation (1)"))
		   (tcp-option "timestamps"
			       (tsval 3187641496
				      (tsecr 4202833524))
			       (:kind "time-stamp-option (8)")
			       (length "10")
			       (timestamp-value "3187641496")
			       (timestamp-echo :reply "4202833534")))
	      (lambda (([timestamp])
		       (time-since "first-frame"
				   "tcp-stream" 17071.176457334 seconds)
		       (time-since "previous-frames"
				   "tcp-stream" 29.844518999 seconds))
		(t (function seq)
		   `(ack analysis
			 (:irrt 0.042288231 seconds)
			 (bytes :in :flight 43)
			 (bytes `(sent-since
				  last-psh :flag 43)
				`(tcp-playload 43 bytes))))
		)))
	   )
  'list1 list2
  :test-not)	

(provide 'tls)
(require 'tls)

(defmacro cl-intersec (list1 list2 &key :test
			     :test-no :key p)
  (declare (list1 list2 &key :test
		  :test-no :key p)
	   (let* ((transport-layer-security)
		  (tlsv1-record :layer application-data-protocol http-over-tls)
		  (opaque-type application-data (23))
		  (version tls (0x0303))
		  (length 38)
		  (encrypted-application-data
		   "9a76adfe4c138d7da8f9808e18c1d046a394cf40140b7678829648bdac76bca459c97dde61e5"
		   ([application-data-protocol http-over-tls])))
	     (lambda ((http-over-tls)
		      (t (function richer)
			 (:seq richer))
		      (interactive tls)))
	     ))
  'tls
  :test-no)

		  
